# Statement example:
# main {        -> SIMULATE
#       ...     -> *contents*
# }             -> END
#
# number          -- one numerical GPSS operand
# word            -- word
# "parameters"    -- string with GPSS operands
# @               -- insertion counter in expression
#                    can be applied to label or device
# @num            -- positional argument


# Program body statement
main { 		            -> SIMULATE
    ...		            -> *contents*
}		                -> END


# Device statement
block {		            -> SEIZE block
    ...		            -> *contents*
}		                -> RELEASE block


# Expression (high-level macro)
exprName {
    ...
}

# Delay statement
delay (number[, number])	    -> ADVANCE number[, number]
delay ("parameters")            -> ADVANCE parameters


# Queue start statement
q (word)	                    -> QUEUE word


# Queue exit statement
dq (word)	                    -> DEPART word


# Generate statement
gen ("parameters")              -> GENERATE parameters


# Start statement
init (number)                   -> START number


# Terminate statement
destroy ([number])              -> TERMINATE [number]


# Transfer statement
goto ("parameters")             -> TRANSFER parameters


# Test statement
compare (word, "parameters")    -> TEST word   parameters


# Savevalue statement
changevar ("parameters")        -> SAVEVALUE parameters


# Initial statement
var ("parameters")              -> INITIAL parameters


# Split statement
copy ("parameters")             -> SPLIT parameters


# Link statement
link ("parameters")             -> LINK parameters


# Unlink statement
unlink ("parameters")           -> UNLINK parameters

# Priority statement
priority (number)               -> PRIORITY number

# Assign statement
assign ("parameters")           -> ASSIGN parameters

# Function statement
func (word, "params", "params") -> word FUNCTION params
                                   params

# Preempt statement
preempt ("parameters")           -> PREEMPT parameters

# Return statement
ret ("parameters")               -> RETURN parameters
